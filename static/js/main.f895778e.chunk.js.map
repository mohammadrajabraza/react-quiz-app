{"version":3,"sources":["components/Question/index.js","components/Result/index.js","App.js","reportWebVitals.js","index.js"],"names":["Question","props","question","incorrect_answers","correct_answer","markAnswer","results","current_index","useState","options","setOptions","useEffect","length","push","array","randomIndex","currentIndex","Math","floor","random","shuffle","className","map","ans","onClick","undefined","givenAnswer","Result","quizScore","SentimentVerySatisfied","SentimentSatisfiedAlt","SentimentVeryDissatisfied","restartQuiz","App","question_bank","setQuestionBank","setCurrentIndex","setResult","score","setScore","quizFinished","setQuizFinished","isQuestionsLoaded","setIsQuestionLoaded","fetch","then","res","json","data","getScore","reduce","acc","item","isRight","id","value","max","SwitchTransition","mode","CSSTransition","timeout","classNames","answer","newResult","tempResults","type","color","height","width","disabled","swal","text","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f895778e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './index.css';\nfunction Question(props) {\n\n    const {\n        question: {question, incorrect_answers, correct_answer}, \n        markAnswer, \n        results,\n        current_index\n    } = props\n    \n\n    // options for current question\n    const [options, setOptions] = useState([])\n\n    useEffect(() => {\n        // to prevent multiple insertion of correct answer into incorrect_answer's array\n        if(incorrect_answers.length < 4){\n          incorrect_answers.push(correct_answer)\n        }\n        setOptions(shuffle(incorrect_answers))\n      }, [current_index])\n    return  <div className=\"mainContainer\">\n                <h2 className=\"titleContainer\">{question}</h2>\n                <div className=\"optionContainer\">\n                    {options.map((ans) => <div \n                        // mark the selected answer and store in result\n                        onClick={() => markAnswer(ans)}\n                        // if the question is answered already then highlight it\n                        className={results !== undefined ? (results.givenAnswer === ans ? 'is-selected option' : 'option') : 'option'} >{ans}</div>)}\n                </div>\n            </div>\n}\n\nexport default Question\n\n\n\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n}","import './index.css';\nimport {SentimentVerySatisfied, \n        SentimentSatisfiedAlt, \n        SentimentVeryDissatisfied} from '@material-ui/icons'\n\nfunction Result(props) {\n    return <div className=\"quizCompleted\">\n                    {/* Conditionally rendering Result's icons, message and \n                        total score on the basis on score */}\n                    {props.quizScore > 7 ? <SentimentVerySatisfied className=\"icon amaizing\"/> : \n                      (props.quizScore > 4 ? <SentimentSatisfiedAlt className=\"icon good\"/> : \n                        <SentimentVeryDissatisfied className=\"icon poor\"/>)}\n                    \n                    <h2 className=\"title\">{`You did ${props.quizScore > 7 ? 'an Amaizing' \n                        : (props.quizScore > 4 ? 'a Good': 'a Poor')} Job!`}</h2>\n                    <p className=\"subtitle\">Total Score: {props.quizScore}/10</p>\n                    <br/>\n                    <button className=\"button\" onClick={props.restartQuiz}>Restart</button>\n                  </div>\n}\n\nexport default Result","import './App.css'\nimport Question from './components/Question'\nimport Result from './components/Result'\nimport { useEffect, useState} from 'react'\nimport { SwitchTransition, CSSTransition } from 'react-transition-group'\nimport swal from 'sweetalert'\nimport Loader from 'react-loader-spinner'\n\nfunction App() {\n\n  const [question_bank, setQuestionBank] = useState([])\n\n  // keeps track of current question to be served\n  const [current_index, setCurrentIndex] = useState(0)\n  \n  // stores result of each question\n  const [results, setResult] = useState([])\n  \n  // stores the total score\n  const [score, setScore] = useState(0);\n\n  const [quizFinished, setQuizFinished] = useState(false)\n\n  const [isQuestionsLoaded, setIsQuestionLoaded] = useState(false)\n\n  useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple')\n      .then((res) => res.json())\n      .then((data) => {\n        setQuestionBank(data.results)\n        setIsQuestionLoaded(true)\n      })\n  }, [])\n\n  const verifyAnswer = (answer) => question_bank[current_index].correct_answer === answer\n\n  // mark the current answer and store the result\n  const markAnswer = (ans) => {\n    \n    let newResult = {\n      givenAnswer : ans,\n      isRight: verifyAnswer(ans)\n    }\n\n    let tempResults = [...results]   \n    tempResults[current_index] === undefined ?\n      tempResults.push(newResult) :\n      tempResults[current_index] = newResult\n\n    setResult(tempResults)\n  }\n\n  const nextQuestion = () => {\n    // \n    if(results[current_index] === undefined)\n      swal({text: 'Answer is required to proceed!', icon:'error'})\n    else {\n      //?setState function doesn't take effect immediately\n      if(current_index === question_bank.length -1){\n        setScore(getScore())\n      }\n      current_index < question_bank.length - 1 ? \n        setCurrentIndex(current_index + 1) :\n        setQuizFinished(true)\n    }\n  }\n\n  const previousQuestion = () => {\n    quizFinished ? \n      setQuizFinished(false) : \n      setCurrentIndex(current_index - 1)\n  }\n\n  const restartQuiz = () => {\n    setCurrentIndex(0);\n    setResult([])\n    setScore(0)\n    setQuizFinished(false)\n  }\n\n  const getScore = () => {\n    return results.reduce((acc, item) => item.isRight ? acc + 1 : acc , 0)\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"container\">\n        <div className=\"questionBox\" id=\"app\">\n          <div className=\"questionContainer\">\n            <header>\n              <h1 className=\"title\">React Quiz App</h1>\n              <div className=\"progressContainer\">\n                <progress className=\"progress\" value={(current_index+1) * question_bank.length} max=\"100\"></progress>\n                <p>{`${current_index === question_bank.length ? current_index :  current_index + 1}/${question_bank.length }`}</p>\n              </div>\n            </header>\n            <SwitchTransition mode=\"out-in\">\n              <CSSTransition\n                key={current_index}\n                timeout={500}\n                classNames=\"fade\">\n                {\n                  // Condition checks for the questions count and once questions finished\n                  // will display result\n                  quizFinished ?\n                  <Result restartQuiz={restartQuiz} quizScore={score}/> :\n                  (isQuestionsLoaded ? \n                  <Question \n                    // passing current question\n                    question={question_bank[current_index]}\n                    markAnswer={markAnswer} \n                    results={results[current_index]}\n                    current_index={current_index}/>:\n                    <Loader className=\"loader\" type=\"Grid\" color=\"#BBDEFB\"  height={100} width={100}/>) \n                }\n                \n              </CSSTransition>\n            </SwitchTransition>\n            <footer className=\"questionFooter\">\n              <div className=\"actions\">\n                <button className=\"button\" onClick={previousQuestion} disabled={current_index === 0}>Prev</button>\n                <button className=\"button\" onClick={nextQuestion} disabled={current_index === 10}>Next</button>\n              </div>\n            </footer>\n          </div>\n          \n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}